// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3

package types

type AddCommentReq struct {
	Content  string `json:"content"`
	ParentId int64  `json:"parentId,optional"` // 回复评论的父ID
}

type Article struct {
	Id         int64      `json:"id"`
	Title      string     `json:"title"`
	Content    string     `json:"content"`
	Summary    string     `json:"summary,optional"`
	CoverImage string     `json:"coverImage,optional"`
	ViewCount  int        `json:"viewCount,default=0"`
	Status     int        `json:"status,options=0|1|2"` // 0-草稿,1-发布,2-删除
	CreatedAt  string     `json:"createdAt,optional"`   // 时间戳字符串
	Author     User       `json:"author"`               // 嵌套用户信息
	Categories []Category `json:"categories,optional"`  // 嵌套分类
}

type ArticleListResp struct {
	List  []Article `json:"list"`
	Total int64     `json:"total"`
}

type Category struct {
	Id   int64  `json:"id"`
	Name string `json:"name"`
	Slug string `json:"slug"`
}

type CategoryListResp struct {
	List []Category `json:"list"`
}

type Comment struct {
	Id        int64  `json:"id"`
	Content   string `json:"content"`
	Status    int    `json:"status,options=0|1|2"` // 0-待审核,1-发布,2-删除
	CreatedAt string `json:"createdAt,optional"`
	User      User   `json:"user,optional"`     // 登录用户信息
	Username  string `json:"username,optional"` // 游客用户名
}

type CommentListResp struct {
	List []Comment `json:"list"`
}

type CreateArticleReq struct {
	Title       string  `json:"title"`
	Content     string  `json:"content"`
	CategoryIds []int64 `json:"categoryIds,optional"` // 关联分类ID列表
}

type IDReq struct {
	Id int64 `path:"id"` // 从URL路径获取ID
}

type ListArticlesReq struct {
	PaginationReq
	CategoryId int64 `form:"categoryId,optional"` // 可选分类筛选
}

type PaginationReq struct {
	Page     int `form:"page,default=1"`      // 当前页码
	PageSize int `form:"pageSize,default=10"` // 每页条数
}

type User struct {
	Id       int64  `json:"id"`
	Username string `json:"username"`
	Avatar   string `json:"avatar,optional"` // 可选字段
	Bio      string `json:"bio,optional"`
}

type UserLoginReq struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type UserLoginResp struct {
	Token string `json:"token"`
	User  User   `json:"user"`
}

type UserRegisterReq struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Email    string `json:"email"`
}
