// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	articleCategoryFieldNames          = builder.RawFieldNames(&ArticleCategory{})
	articleCategoryRows                = strings.Join(articleCategoryFieldNames, ",")
	articleCategoryRowsExpectAutoSet   = strings.Join(stringx.Remove(articleCategoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	articleCategoryRowsWithPlaceHolder = strings.Join(stringx.Remove(articleCategoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	articleCategoryModel interface {
		Insert(ctx context.Context, data *ArticleCategory) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ArticleCategory, error)
		FindOneByArticleIdCategoryId(ctx context.Context, articleId int64, categoryId int64) (*ArticleCategory, error)
		Update(ctx context.Context, data *ArticleCategory) error
		Delete(ctx context.Context, id int64) error
	}

	defaultArticleCategoryModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ArticleCategory struct {
		Id         int64     `db:"id"`
		ArticleId  int64     `db:"article_id"`  // 文章ID
		CategoryId int64     `db:"category_id"` // 分类ID
		CreatedAt  time.Time `db:"created_at"`  // 创建时间
	}
)

func newArticleCategoryModel(conn sqlx.SqlConn) *defaultArticleCategoryModel {
	return &defaultArticleCategoryModel{
		conn:  conn,
		table: "`article_category`",
	}
}

func (m *defaultArticleCategoryModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultArticleCategoryModel) FindOne(ctx context.Context, id int64) (*ArticleCategory, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", articleCategoryRows, m.table)
	var resp ArticleCategory
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultArticleCategoryModel) FindOneByArticleIdCategoryId(ctx context.Context, articleId int64, categoryId int64) (*ArticleCategory, error) {
	var resp ArticleCategory
	query := fmt.Sprintf("select %s from %s where `article_id` = ? and `category_id` = ? limit 1", articleCategoryRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, articleId, categoryId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultArticleCategoryModel) Insert(ctx context.Context, data *ArticleCategory) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, articleCategoryRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ArticleId, data.CategoryId)
	return ret, err
}

func (m *defaultArticleCategoryModel) Update(ctx context.Context, newData *ArticleCategory) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, articleCategoryRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ArticleId, newData.CategoryId, newData.Id)
	return err
}

func (m *defaultArticleCategoryModel) tableName() string {
	return m.table
}
