// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	categoriesFieldNames          = builder.RawFieldNames(&Categories{})
	categoriesRows                = strings.Join(categoriesFieldNames, ",")
	categoriesRowsExpectAutoSet   = strings.Join(stringx.Remove(categoriesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	categoriesRowsWithPlaceHolder = strings.Join(stringx.Remove(categoriesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	categoriesModel interface {
		Insert(ctx context.Context, data *Categories) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Categories, error)
		FindOneBySlug(ctx context.Context, slug string) (*Categories, error)
		Update(ctx context.Context, data *Categories) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCategoriesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Categories struct {
		Id          int64          `db:"id"`
		Name        string         `db:"name"`        // 分类名称
		Slug        string         `db:"slug"`        // 分类URL别名
		Description sql.NullString `db:"description"` // 分类描述
		CreatedAt   time.Time      `db:"created_at"`  // 创建时间
		UpdatedAt   time.Time      `db:"updated_at"`  // 更新时间
	}
)

func newCategoriesModel(conn sqlx.SqlConn) *defaultCategoriesModel {
	return &defaultCategoriesModel{
		conn:  conn,
		table: "`categories`",
	}
}

func (m *defaultCategoriesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCategoriesModel) FindOne(ctx context.Context, id int64) (*Categories, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", categoriesRows, m.table)
	var resp Categories
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCategoriesModel) FindOneBySlug(ctx context.Context, slug string) (*Categories, error) {
	var resp Categories
	query := fmt.Sprintf("select %s from %s where `slug` = ? limit 1", categoriesRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, slug)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCategoriesModel) Insert(ctx context.Context, data *Categories) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, categoriesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Slug, data.Description)
	return ret, err
}

func (m *defaultCategoriesModel) Update(ctx context.Context, newData *Categories) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, categoriesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Name, newData.Slug, newData.Description, newData.Id)
	return err
}

func (m *defaultCategoriesModel) tableName() string {
	return m.table
}
