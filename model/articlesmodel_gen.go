// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	articlesFieldNames          = builder.RawFieldNames(&Articles{})
	articlesRows                = strings.Join(articlesFieldNames, ",")
	articlesRowsExpectAutoSet   = strings.Join(stringx.Remove(articlesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	articlesRowsWithPlaceHolder = strings.Join(stringx.Remove(articlesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	articlesModel interface {
		Insert(ctx context.Context, data *Articles) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Articles, error)
		FindOneBySlug(ctx context.Context, slug string) (*Articles, error)
		Update(ctx context.Context, data *Articles) error
		Delete(ctx context.Context, id int64) error
	}

	defaultArticlesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Articles struct {
		Id          int64          `db:"id"`
		UserId      int64          `db:"user_id"`      // 作者ID
		Title       string         `db:"title"`        // 文章标题
		Slug        string         `db:"slug"`         // 文章URL别名
		Content     string         `db:"content"`      // 文章内容
		Summary     sql.NullString `db:"summary"`      // 文章摘要
		CoverImage  sql.NullString `db:"cover_image"`  // 封面图URL
		ViewCount   int64          `db:"view_count"`   // 浏览次数
		Status      int64          `db:"status"`       // 状态(0-草稿,1-已发布,2-已删除)
		PublishedAt sql.NullTime   `db:"published_at"` // 发布时间
		CreatedAt   time.Time      `db:"created_at"`   // 创建时间
		UpdatedAt   time.Time      `db:"updated_at"`   // 更新时间
	}
)

func newArticlesModel(conn sqlx.SqlConn) *defaultArticlesModel {
	return &defaultArticlesModel{
		conn:  conn,
		table: "`articles`",
	}
}

func (m *defaultArticlesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultArticlesModel) FindOne(ctx context.Context, id int64) (*Articles, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", articlesRows, m.table)
	var resp Articles
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultArticlesModel) FindOneBySlug(ctx context.Context, slug string) (*Articles, error) {
	var resp Articles
	query := fmt.Sprintf("select %s from %s where `slug` = ? limit 1", articlesRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, slug)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultArticlesModel) Insert(ctx context.Context, data *Articles) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, articlesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Title, data.Slug, data.Content, data.Summary, data.CoverImage, data.ViewCount, data.Status, data.PublishedAt)
	return ret, err
}

func (m *defaultArticlesModel) Update(ctx context.Context, newData *Articles) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, articlesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.UserId, newData.Title, newData.Slug, newData.Content, newData.Summary, newData.CoverImage, newData.ViewCount, newData.Status, newData.PublishedAt, newData.Id)
	return err
}

func (m *defaultArticlesModel) tableName() string {
	return m.table
}
